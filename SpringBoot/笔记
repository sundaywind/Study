1.SpringBoot简介：
	Spring家族的一个开源框架，建立在Spring的基础之上（SpringBoot的底层就是Spring）！
	目的是用来简化Spring（动态Web）开发的，使用SpringBoot之后，简化了我们很多配置！
	SpringBoot不建议使用xml配置的方式！
	
2.SpringBoot优势：
	1）可以独立开发一个Spring应用【每一个springBoot项目都是一个进程】
	2）自带了内嵌的tomcat、jetty服务器。
	3）简化xml配置（提供了N多个starter启动项来简化我们的配置）。
	4）自动配置所需要的jar包（简化jar包依赖的配置）。
	5）不提倡使用xml配置文件的方式，建议：使用基于注解的配置类来取代基于xml的配置。
	
3.SpringBoot对于jdk的要求：
	1）springBoot1.6.x版本以下，需要jdk1.7。
	2）springBoot2.x  版本以上，需要jdk1.8及以上。
	
4.SpringBoot使用前提：
	1）确保安装了Java，并配置它们（cmd中：java -version），再Eclipse中配置。
	2）确保安装了Maven，并配置它们（cmd中：mvn -version），再Eclipse中配置。
	
5.SpringBoot第一个案例：
	在Eclipse中New一个MavenProject
	在打包方式Packaging选择jar
	在pom.xml中：
		添加一个<parent>标签，用来指定SpringBoot的版本：
			<parent> 
				<groupId>org.springframework.boot</groupId> 
				<artifactId>spring-boot-starter-parent</artifactId> 
				<!-- SpringBoot的版本 -->
				<version>2.0.1.BUILD-SNAPSHOT</version> 
			</parent>
		在该 parent 部分正下方添加 依赖项：			
			<dependencies> 
				<dependency> 
					<groupId>org.springframework.boot</groupId> 
					<artifactId>spring-boot-starter-web</artifactId> 
				</dependency> 
			</dependencies>
	写配置类和方法：
		package com.wind;
		import org.springframework.boot.SpringApplication;
		import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.bind.annotation.RestController;
		@RestController 			// 	相当于在类中的所有方法上加：Controller + ResponseBody注解。
		@EnableAutoConfiguration	// （开启自动配置）作用是：标注这个类是一个配置类，该配置相当于一个容器（类似于我们原来使用Spring时候的配置文件）
		public class FirstApp {
			/*
				@GetMapping		@RequestMapping + method = GET
				@PostMapping	@RequestMapping + method = POST
				@PutMapping		@RequestMapping + method = PUT
				@DeleteMapping	@RequestMapping + method = DELETE
			*/
			@RequestMapping("/")
			String home() {
				return "Hello World!世界 你好！";
			}
			// 启动类
			public static void main(String[] args) {
				// 静态main方法中，调用SpringBoot的run方法：第一个参数：@EnableAutoConfiguration 标注的当前类的字节码
				SpringApplication.run(FirstApp.class, args);
			}
			/*
				启动后：（右键main方法，Run As ---> SpringBoot App）
					Tomcat started on port(s): 8080 (http)
					o.a.c.c.C.[Tomcat].[localhost].[/]
				浏览器访问：http://localhost:8080/
			*/
		}

6.配置类和Controller类分离：
	1）写Controller：
		package com.wind.controller;
		import java.util.HashMap;
		import java.util.Map;
		import org.springframework.stereotype.Controller;
		import org.springframework.web.bind.annotation.GetMapping;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.bind.annotation.ResponseBody;
		@Controller
		@RequestMapping("/book")
		public class FirstController {
			@GetMapping("/msg")
			@ResponseBody
			public Map<String, String> getMsg() {
				Map<String, String> map = new HashMap<String, String>();
				map.put("bookName", "齐天大圣");
				map.put("price", "18.8");
				return map;
			}
		}
	2）写配置类，并将Controller类扫描进容器：
		package com.wind.config;
		import org.springframework.boot.SpringApplication;
		import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
		import org.springframework.context.annotation.ComponentScan;
		@EnableAutoConfiguration
		@ComponentScan(value = {"com.wind.controller"})
		public class MainConfig {
			// 启动类
			public static void main(String[] args) {
				// 静态main方法中，调用SpringBoot的run方法：第一个参数：@EnableAutoConfiguration标注的当前类的字节码
				SpringApplication.run(MainConfig.class, args);
			}
			/*
				将配置类和Controller类分离：
					启动status=404：
						配置了启动类，写了FirstController，但是没配置到容器中。
					怎么配置扫描包：
						在油@EnableAutoConfiguration类上加@ComponentScan(value = {"com.wind.controller"}) 扫描包注解。
			*/
		}
		
7.正常开发、正规写法：
	1）配置类：
		package com.wind.config;
		import org.springframework.boot.SpringApplication;
		import org.springframework.boot.autoconfigure.SpringBootApplication;
		@SpringBootApplication	// 相当于@EnableAutoConfiguration和@ComponentScan注解，但是只能扫描跟它同包或者子包下的@Controller类
		public class DevelopConfig {
			public static void main(String[] args) {
				SpringApplication.run(DevelopConfig.class, args);
			}
		}
	2）@Controller类：
		package com.wind.config.controller;
		import java.util.HashMap;
		import java.util.Map;
		import org.springframework.stereotype.Controller;
		import org.springframework.web.bind.annotation.GetMapping;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.bind.annotation.ResponseBody;
		@Controller
		@RequestMapping("/book")
		public class SecondController {
			@GetMapping("/msg")
			@ResponseBody
			public Map<String, String> getMsg() {
				Map<String, String> map = new HashMap<String, String>();
				map.put("bookName", "金瓶梅");
				map.put("price", "100");
				return map;
			}
		}

8.可执行jar：（jar包可以在本地直接运行）
	1）在pom.xml中，加载可执行jar的插件：
		<build>
			<plugins>
				<!-- 可执行jar所需的插件 -->
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</build>
	2）右键项目名，打包：（Run As --> package）
	3）会在target目录生成SpringBoot-0.0.1-SNAPSHOT.jar
	4）复制SpringBoot-0.0.1-SNAPSHOT.jar到本地磁盘
	5）在当前jar包地址栏输入cmd
	6）输入命令：java -jar SpringBoot-0.0.1-SNAPSHOT.jar运行。
	
9.SpringBoot目录结构：
	项目名
	   src/main/java
	   src/main/resources
	      static:用于存放静态资源：css、js、图片
		  templates:模板，jsp/Thymleaf模板/FreeMarker
		  springboot所需要的配置文件【.properties,.yml】	
	
10.SpringBoot有两种类型的配置文件：
	.properties：使用键值对的方式。
	.yml配置文件：
		yml配置文件性能优于xml配置文件，更适合开发人员使用，建议使用yml格式的配置文件
		yml格式是以空格和换行来区分上下级关系，注意：值和冒号之间必须有一个空格！
	核心配置文件
		application.properties
	这两个配置文件的关系：
		当.properties配置文件和.yml配置文件都存在的情况下，如果配置信息不同，那么这两个配置文件都起作用，
		如果配置文件中的配置信息相同，那么.properties配置文件的优先级要高！	
	
11.将配置文件的信息复制给@Controller类中的属性或对象：
	
















